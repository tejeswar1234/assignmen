#include <bits/stdc++.h>
using namespace std;

vector<vector<int>> criticalConnections(int n, vector<vector<int>>& connections) {
    vector<vector<int>> graph(n);
    for(auto& conn : connections) {
        graph[conn[0]].push_back(conn[1]);
        graph[conn[1]].push_back(conn[0]);
    }
    
    vector<int> disc(n, -1);
    vector<int> low(n, -1);
    vector<int> parent(n, -1);
    vector<vector<int>> bridges;
    int time = 0;
    
    function<void(int)> dfs = [&](int u) {
        disc[u] = low[u] = time++;
        for(int v : graph[u]) {
            if(disc[v] == -1) {
                parent[v] = u;
                dfs(v);
                low[u] = min(low[u], low[v]);
                if(low[v] > disc[u]) {
                    bridges.push_back({u, v});
                }
            }
            else if(v != parent[u]) {
                low[u] = min(low[u], disc[v]);
            }
        }
    };
    
    for(int i = 0; i < n; i++) {
        if(disc[i] == -1) {
            dfs(i);
        }
    }
    
    return bridges;
}

int main() {
    int n = 4;
    vector<vector<int>> connections = {{0,1},{1,2},{2,0},{1,3}};
    vector<vector<int>> bridges = criticalConnections(n, connections);
    for(auto& b : bridges) {
        cout << b[0] << " " << b[1] << endl;
    }
    return 0;
}
